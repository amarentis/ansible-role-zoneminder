---
# tasks file for ansible-Zoneminder
- name: installing zmrepo 
  yum: name="{{ zmrepo_url_el6 }}" disable_gpg_check=yes state=latest
  when: ansible_pkg_mgr == 'yum'

- name: installing ZoneMinder
  yum: name=zoneminder state=latest
  notify: start_mysql

- name: ensuring all required ZM services are enabled at boot
  service: name="{{ item }}" enabled=yes
  with_items: ['mysqld', 'zoneminder', 'httpd']

- name: checking to see if mysql is started
  service: name=mysqld state=running

- name: copying mysql_secure script to host
  template: > 
    src=secure_mysql.j2
    dest=/root/secure_mysql
    owner=root
    group=root
    mode=0755
  notify: secure_mysql

- name: creating ZoneMinder (zm) database
  mysql_db: login_user=root login_password={{ mysql_root_pwd }} name=zm state=present

- name: creating ZoneMinder user and granting perms
  mysql_user: >
    login_user=root
    login_password={{ mysql_root_pwd }}
    name={{ zm_db_user }}
    password={{ zm_db_password }}
    priv="*.*:select,insert,update,delete,lock tables,alter"
    state=present

- name: executing sql script on zm database
  mysql_db: >
    login_user=root
    login_password={{ mysql_root_pwd }}
    name=zm
    state=import
    target=/usr/share/zoneminder/db/zm_create.sql
  notify: reload_mysql_privs

- name: updating custom credentials for /etc/zm.conf
  lineinfile: > 
    state=present
    backrefs=yes           
    dest=/etc/zm.conf
    regexp="{{ item.expr }}"
    line="{{ item.mod }}"
  with_items:
    - name: "Replace contents: user"
      expr: "ZM_DB_USER="
      mod: "ZM_DB_USER={{ zm_db_user }}"
    - name: "Replace contents: password"
      expr: "ZM_DB_PASS="
      mod: "ZM_DB_PASS={{ zm_db_password }}"

- name: modifying php to support local_machine timezone configuration
  lineinfile: >
    state=present
    backrefs=yes
    dest=/etc/php.ini
    regexp=";date.timezone"
    line="date.timezone = {{ date_timezone }}" 

- name: editing zoneminders httpd config file
  lineinfile: dest=/etc/httpd/conf.d/zoneminder.conf state=absent regexp='^Deny\s+from\s+all'
  
- name: starting zoneminder services
  service: name={{ item }} state=running enabled=yes
  with_items: ['httpd', 'zoneminder']
  notify: prompt_service_address
...